/// <reference types="cypress" />
// ***********************************************

Cypress.Commands.add('setAuthToken', () => {
    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0QG1haWwuY29tIiwiYXV0aCI6IlJPTEVfVVNFUiIsImV4cCI6MjAzNDU4Njk0MCwiaWF0IjoxNzE5MjI2OTQwfQ.Rf0rYdt2KWGBbbHVe4v1v6J3PvBECO8h45LzOxoU1Mc'; // Replace with the token generated by the script
    window.localStorage.setItem('authToken', token);
    // Verify the token is set
    const storedToken = window.localStorage.getItem('authToken');
    if (!storedToken) {
      throw new Error('Auth token is not set');
    }
  });

  Cypress.Commands.add('login', (email, password) => {
    cy.visit('/auth/login');
    cy.get('input[id=email]').type(email);
    cy.get('input[id=password]').type(password);

    cy.intercept('POST', '/api/auth/login').as('loginRequest');
    
    cy.get('button').contains('Login').click();
    // Wait for the login request to complete
  cy.wait('@loginRequest').then((interception) => {
    // Log the response to debug
    if (interception.response) {
      console.log('Login request response:', interception.response);

      // Check the response status
      expect(interception.response.statusCode).to.equal(200);
    } else {
      throw new Error('Login request failed: response is undefined');
    }
  });

  // Ensure login is successful
  cy.url().should('not.include', '/auth/login');
});

Cypress.Commands.add('loginWithoutIntercept', (email: string, password: string) => {
    cy.visit('/auth/login');
    
    cy.get('input[id=email]').type(email);
    cy.get('input[id=password]').type(password);
    
    cy.get('button').contains('Login').click();
    
    // Ensure login is successful by checking URL change
    cy.url().should('not.include', '/auth/login');
  });
  
  Cypress.Commands.add('setAuthToken', () => {
    const token = 'your-generated-jwt-token';
    cy.window().then((win) => {
      win.localStorage.setItem('authToken', token);
    });
  });